---
title: "Residualized Change Scores"
author: "Biostatistics Working Group"
---

# Mulitple Regression {.unnumbered}

## Overview

<p>

This example assesses whether height, measured at the 1-Year follow-up (T1) in a subsample of ABCD participants, is predicted by weight and height measured at baseline (T0). A visual inspection is further conducted via a scatterplot to graphically represent the relationship between height at Year_1 and weight at baseline, controlling for height at baseline. The ensuing analysis and interpretations are detailed in the subsequent sections.

</p>

## Preliminary Setup

::: panel-tabset
### Install Packages {.tabset .tabset-fade .tabset-pills}

::: blue
> **This code installs the r packages necessary for this example, if
> they are not already installed**

```{r pckg-install}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

# Create a list of required packages
packages_required <- c("tidyverse","rstatix","DT","lme4")

# Check which packages are not installed and install them
packages_to_install <- setdiff(packages_required, rownames(installed.packages()))
if (length(packages_to_install) > 0) {
    install.packages(packages_to_install)
}

# Load the required packages
lapply(packages_required, library, character.only = TRUE)

```
:::

### Load Packages

::: blue
**This code loads the r libraries necessary for this example**

```{r lib-load}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

library(tidyverse)    # Collection of R packages for data science
library(rstatix)      # Pipe-friendly framework for basic statistical tests
library(DT)           # Rendering interactive data tables
library(lme4)         # Linear mixed-effects models

```
:::

### Config Options

::: blue
**This code configures knitr code chunk options**

```{r config}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

knitr::opts_chunk$set(echo = T, message=F, warning=F, error=F, 
                      comment=NA, cache=T, code_folding=T,
                      R.options=list(width=220, digits = 3),
                      fig.align='center', 
                      out.width='75%', fig.asp=.75)
```
:::
:::

## Descriptives Overview

::: panel-tabset
### Read and View Data {.tabset .tabset-fade .tabset-pills}

::: blue
**This code reads in and shows the data to be used in the current
example**

```{r read-data}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
#| cache: FALSE

# Set the data paths
data_path_1 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/demo5.0.rds"
data_path_2 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"

# Read the data
data_demographics <- readRDS(data_path_1)
data_nonimaging <- readRDS(data_path_2)

# Subset the nonimaging data to include desired variables
selected_vars <- c("src_subject_id", "eventname", "nihtbx_totalcomp_fc", "anthroweightcalc", "anthroheightcalc")
subset_data <- data_nonimaging[, selected_vars]

library(dplyr)
# # Merge the datasets on 'src_subject_id' and 'eventname'
merged_data <- data_demographics %>%
  full_join(subset_data, by = c("src_subject_id", "eventname"))

# Inspect the merged data structure
str(merged_data)

# Define event names to be retained in the analysis and convert variables to appropriate data types
eventnames_to_include <- c("baseline_year_1_arm_1",
                           "1_year_follow_up_y_arm_1",
                           "2_year_follow_up_y_arm_1",
                           "3_year_follow_up_y_arm_1",
                           "4_year_follow_up_y_arm_1")

df <- merged_data %>%
  filter(eventname %in% eventnames_to_include) %>%
  mutate(
    src_subject_id = as.factor(src_subject_id),
    eventname = factor(eventname, levels = eventnames_to_include, ordered = TRUE),
    age = as.numeric(age),
    sex = as.factor(sex),
    race.4level = as.factor(race.4level),
    hisp = as.factor(hisp),
    high.educ.bl = as.factor(high.educ.bl),
    household.income.bl = as.factor(household.income.bl),
    acs_raked_propensity_score = as.numeric(acs_raked_propensity_score),
    rel_family_id.bl = as.factor(rel_family_id.bl),
    site_id_l = as.factor(site_id_l),
    nihtbx_totalcomp_fc = as.numeric(nihtbx_totalcomp_fc),
    anthroweightcalc = as.numeric(anthroweightcalc),
    anthroheightcalc = as.numeric(anthroheightcalc)
  ) %>%
  # Exclude cases from unused assessment waves
  filter(!is.na(eventname))

```
:::

### Descriptives

::: blue
**This code creates a descriptives table**

```{r descriptives}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE

# Define a function to compute descriptives
compute_descriptives <- function(data, event_name) {
  # For factor variables
  sex_desc <- paste0(table(data$sex), " (", round(100 * prop.table(table(data$sex)), 1), "%)")
  race_desc <- paste0(table(data$race.4level), " (", round(100 * prop.table(table(data$race.4level)), 1), "%)")
  
  # For numeric variables
  age_desc <- paste0(round(mean(data$age, na.rm = TRUE), 2), " (", round(sd(data$age, na.rm = TRUE), 2), ")")
  weight_desc <- paste0(round(mean(data$anthroweightcalc, na.rm = TRUE), 2), " (", round(sd(data$anthroweightcalc, na.rm = TRUE), 2), ")")
  height_desc <- paste0(round(mean(data$anthroheightcalc, na.rm = TRUE), 2), " (", round(sd(data$anthroheightcalc, na.rm = TRUE), 2), ")")
  
  # Combine into a data frame
  desc_df <- data.frame(
    Variable = c("Sex - Female", "Sex - Male or other", "Race - Asian", "Race - Black", "Race - Other/Mixed", "Race - White", "Age", "Weight", "Height"),
    Value = c(sex_desc, race_desc, age_desc, weight_desc, height_desc)
  )
  
  # Rename the Value column based on event name
  colnames(desc_df)[2] <- event_name
  return(desc_df)
}

# Compute descriptives for each event
baseline_desc <- compute_descriptives(subset(df, eventname == "baseline_year_1_arm_1"), "baseline_year_1_arm_1")
one_year_desc <- compute_descriptives(subset(df, eventname == "1_year_follow_up_y_arm_1"), "1_year_follow_up_y_arm_1")
two_year_desc <- compute_descriptives(subset(df, eventname == "2_year_follow_up_y_arm_1"), "2_year_follow_up_y_arm_1")
three_year_desc <- compute_descriptives(subset(df, eventname == "3_year_follow_up_y_arm_1"), "3_year_follow_up_y_arm_1")

# Join all data frames side-by-side
final_table <- baseline_desc %>%
  left_join(one_year_desc, by = "Variable") %>%
  left_join(two_year_desc, by = "Variable") %>%
  left_join(three_year_desc, by = "Variable")

# Adjust for the required format
final_table[1:6, 3:5] <- NA

# Round numeric values to two decimal places
numeric_cols <- sapply(final_table, is.numeric)
final_table[numeric_cols] <- lapply(final_table[numeric_cols], round, 2)

# Create heading rows with the same columns as final_table
heading_rows <- data.frame(
  Variable = c("Sex", "Race"),
  baseline_year_1_arm_1 = NA_real_,
  `1_year_follow_up_y_arm_1` = NA_real_,
  `2_year_follow_up_y_arm_1` = NA_real_,
  `3_year_follow_up_y_arm_1` = NA_real_
)

# Set column names of heading_rows to match final_table
colnames(heading_rows) <- colnames(final_table)

# Introduce group labels and adjust the "Variable" column
final_table <- rbind(
                    heading_rows[1,], 
                    final_table[1:2,],
                    heading_rows[2,], 
                    final_table[3:6,], 
                    final_table[7:9,]
                    )

# Update the Variable column to remove redundant factor variable name
final_table$Variable <- gsub("Sex - ", "", final_table$Variable)
final_table$Variable <- gsub("Race - ", "", final_table$Variable)
final_table$Variable[final_table$Variable == "Male or other"] <- "Male"

# Add non-breaking spaces for increased indentation
final_table$Variable[final_table$Variable %in% c("Female", "Male", "Asian", "Black", "Other/Mixed", "White")] <- 
  paste0(rep("&nbsp;", 6), final_table$Variable[final_table$Variable %in% c("Female", "Male", "Asian", "Black", "Other/Mixed", "White")])

# Update column headers
colnames(final_table)[2:5] <- c("Baseline", "Year 1", "Year 2", "Year 3")

# Display the table interactively without row names, with updated column headers, and with HTML entities rendered
datatable(final_table, 
          colnames = c("", "Baseline", "Year 1", "Year 2", "Year 3"),
          options = list(pageLength = nrow(final_table), autoWidth = TRUE),
          rownames = FALSE, escape = FALSE,
          caption = "Descriptives Table")  # Add table title

```

:::
:::

## Results

::: panel-tabset
### Build Model {.tabset .tabset-fade .tabset-pills}

::: blue
The code snippet below tells R to conduct a multiple regression analysis by subtracting each participant's height at T1 from their height at T0. Relevant summary statistics are also provided.

**Compute Multiple Regression Model**
```{r build-model-resid-regression-1}
#| class.source: 'fold-hide'
#| message: FALSE
#| warning: FALSE
#| echo: TRUE

# Split data using the correct eventname values
baseline_data <- df %>% 
  filter(eventname == "baseline_year_1_arm_1") %>% 
  select(src_subject_id, Height_baseline = anthroheightcalc, Weight_baseline = anthroweightcalc)

followup_data <- df %>% 
  filter(eventname == "1_year_follow_up_y_arm_1") %>% 
  select(src_subject_id, Height_followup = anthroheightcalc)

# Merge baseline and follow-up data
merged_data <- baseline_data %>%
  left_join(followup_data, by = "src_subject_id")

# Check the first few rows of the merged data
#head(merged_data)

# Fit the regression model excluding NA values
model <- lm(Height_followup ~ Height_baseline + Weight_baseline, data = merged_data, na.action = na.exclude)

```

:::

### Model Summary {.tabset .tabset-fade .tabset-pills}

::: blue

A plot to show xxxxx.
```{r model-checking}
model_summary <- summary(model)
print(model_summary)

par(mfrow = c(2, 2))  # Set up a 2x2 plotting area
plot(model)  # Generate diagnostic plots

```

This regression analysis evaluates how baseline height and weight predict children's height at a 1-year follow-up. The output from our model provides several key statistics:

i. an F-statistic of `r model_summary$fstatistic[1]`;
ii. degrees of freedom of `r model_summary$df[2]`;
iii. parameter estimates for baseline height and weight;
iv. standard errors for these estimates; and
v. p-values for the significance of these estimates.

For every one unit increase in baseline height, there's an associated increase of approximately `r round(model_summary$coefficients["Height_baseline", "Estimate"], 3)` units in the follow-up height, and this effect was statistically significant with a p-value of `r model_summary$coefficients["Height_baseline", "Pr(>|t|)"]`. Similarly, for every one unit increase in baseline weight, there's an associated increase of approximately `r round(model_summary$coefficients["Weight_baseline", "Estimate"], 4)` units in the follow-up height, which is also statistically significant with a p-value of `r model_summary$coefficients["Weight_baseline", "Pr(>|t|)"]`. Overall, this model explains a substantial portion of the variance in follow-up height, with an adjusted R-squared value of `r round(model_summary$adj.r.squared, 4)`. The overall model is highly significant with a p-value less than `r model_summary$coefficients[1,4]`, indicating that the predictors, collectively, have a significant relationship with the dependent variable.

:::

### Model Plots  {.tabset .tabset-fade .tabset-pills}

::: blue
```{r scatterplot}

# Scatterplot with regression line for Weight_baseline
ggplot(merged_data, aes(x = Weight_baseline, y = Height_followup)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", color = "black") + 
  labs(title = "Relationship between Baseline Weight and Follow-up Height",
       x = "Baseline Weight",
       y = "Follow-up Height") +
  theme_minimal()

```

The scatterplot visually depicts the relationship between children's weights at baseline (`r names(merged_data)[3]`) and their heights at Year_1 (`r names(merged_data)[4]`). Each point on the plot represents a child, with their baseline weight plotted on the x-axis and their Year_1 height on the y-axis. The clear positive linear trend, as illustrated by the black regression line, indicates that children who had higher weights at baseline generally had higher heights at Year_1. While further statistical analyses can quantify the strength and direction of this relationship, visually, the data suggests a pronounced positive association between baseline weight and follow-up height.

:::
:::

## Wrapping Up
<div class = "blue">

::: panel-tabset
### Write-up {.tabset .tabset-fade .tabset-pills}

::: blue

The regression analysis was conducted to predict children's height at the 1-Year follow-up using their baseline height (`r names(merged_data)[2]`) and weight (`r names(merged_data)[3]`). Both predictors were statistically significant. Specifically, for every one-unit increase in baseline height, the height at Year_1 increased by approximately `r round(model_summary$coefficients["Height_baseline", "Estimate"], 3)` units, while holding weight constant. Similarly, for every one-unit increase in baseline weight, the height at Year_1 increased by about `r round(model_summary$coefficients["Weight_baseline", "Estimate"], 4)` units, while holding baseline height constant. The overall model explained a substantial `r round(model_summary$adj.r.squared * 100, 2)`% of the variance in height at the 1-Year follow-up, as indicated by the adjusted R-squared value.
  

:::
:::