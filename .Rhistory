TimePoint = rep(c("T1", "T2"), times=2),
Job_Satisfaction = round(runif(2*n, 5, 10)), # keeping this random as before
)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
head(data_large)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
t1_scores_large <- data_large$Life_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Life_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
t1_scores_large <- data_large$Life_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Life_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
# Running the paired t-test
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
summary(test_result)
test_result$statistic   # This will give the t-value
test_result$p.value     # This will give the p-value
test_result
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(correlated_data))
)
head(data_large)
if (!("lme4" %in% installed.packages())) install.packages("lme4")
library(lme4)
model <- lmer(outcome ~ time + (1 | subject_id), data = data)
model <- lmer(Job_Satisfaction ~ TimePoint + (1 | Individual), data = data_large)
summary(model)
model
model
summary(model)
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(correlated_data))
)
# Conducting the Wilcoxon Signed-Rank Test
test_result <- wilcox.test(data_wide$Life_Satisfaction_T1, data_wide$Life_Satisfaction_T2, paired = TRUE)
# Displaying the result
test_result
summary(test_result)
# Displaying the result
test_result
# Displaying the result
summary(test_result)
# Displaying the result
summary(test_result)
# Displaying the result
test_result
# Conducting the Wilcoxon Signed-Rank Test
test_result <- wilcox.test(data_wide$Life_Satisfaction_T1, data_wide$Life_Satisfaction_T2, paired = TRUE)
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame in wide format
data_wide <- data.frame(
Individual = 1:n,
Job_Satisfaction_T1 = correlated_data[,1],
Job_Satisfaction_T2 = correlated_data[,2],
Job_Satisfaction_T3 = correlated_data[,3],
Job_Satisfaction_T4 = correlated_data[,4]
)
# Conducting the Wilcoxon Signed-Rank Test
test_result <- wilcox.test(data_wide$Job_Satisfaction_T1, data_wide$Job_Satisfaction_T2, paired = TRUE)
# Displaying the result
print(test_result)
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(correlated_data))
)
head(data_large)
if (!("lme4" %in% installed.packages())) install.packages("geepack")
library(geepack)
library(geepack)
# Fitting the longitudinal marginal model
model <- geeglm(Job_Satisfaction ~ TimePoint, data = data_large, id = Individual, family = binomial(link = "logit"), corstr = "exchangeable")
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_probs <- matrix(runif(n * 4), ncol=4)
correlated_probs <- random_probs %*% cholesky
# Convert the probabilities to binary outcomes (using 0.5 as the threshold)
binary_outcomes <- ifelse(correlated_probs > 0.5, 1, 0)
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(binary_outcomes))
)
head(data_large)
if (!("lme4" %in% installed.packages())) install.packages("geepack")
library(geepack)
library(geepack)
# Fitting the longitudinal marginal model
model <- geeglm(Job_Satisfaction ~ TimePoint, data = data_large, id = Individual, family = binomial(link = "logit"), corstr = "exchangeable")
summary(model)
print(model)
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Convert the correlated data to probabilities using the plogis function
correlated_probs <- plogis(correlated_data)
# Convert the probabilities to binary outcomes (using 0.5 as the threshold)
binary_outcomes <- ifelse(correlated_probs > 0.5, 1, 0)
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(binary_outcomes))
)
head(data_large)
if (!("geepack" %in% installed.packages())) install.packages("geepack")
library(geepack)
# Running the model
model <- geeglm(Job_Satisfaction ~ TimePoint, data = data_large, id = Individual, family = binomial(link = "logit"), corstr = "exchangeable")
print(model)
# This will create a dataset with 2000 rows (4 rows for each of the 500 individuals).
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30, 0.30, 0.30,
0.30, 1, 0.30, 0.30,
0.30, 0.30, 1, 0.30,
0.30, 0.30, 0.30, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data for 4 timepoints
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Convert the correlated data to probabilities using the plogis function
correlated_probs <- plogis(correlated_data)
# Convert the probabilities to binary outcomes (using 0.5 as the threshold)
binary_outcomes <- ifelse(correlated_probs > 0.5, 1, 0)
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=4),
TimePoint = rep(c("T1", "T2", "T3", "T4"), times=n),
Job_Satisfaction = as.vector(t(binary_outcomes))
)
if (!("lme4" %in% installed.packages())) install.packages("lme4")
library(lme4)
library(lme4)
model <- glmer(Job_Satisfaction ~ TimePoint + (1 | Individual), data = data_large, family = binomial(link = "logit"))
print(model)
# Setting the seed for reproducibility
set.seed(123)
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.3, 0.3, 0.3,
0.3, 1, 0.3, 0.3,
0.3, 0.3, 1, 0.3,
0.3, 0.3, 0.3, 1),
nrow=4)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 4), ncol=4)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame in wide format
data_wide <- data.frame(
Individual = 1:n,
Job_Satisfaction_T1 = round(runif(n, 5, 10)),
Job_Satisfaction_T2 = round(runif(n, 5, 10)),
Job_Satisfaction_T3 = round(runif(n, 5, 10)),
Job_Satisfaction_T4 = round(runif(n, 5, 10)),
Life_Satisfaction_T1 = round(correlated_data[,1] * 2 + 7),
Life_Satisfaction_T2 = round(correlated_data[,2] * 2 + 7),
Life_Satisfaction_T3 = round(correlated_data[,3] * 2 + 7),
Life_Satisfaction_T4 = round(correlated_data[,4] * 2 + 7)
)
model <- '
# Autoregressive paths
Job_Satisfaction_T2 ~ a1 * Job_Satisfaction_T1
Job_Satisfaction_T3 ~ a2 * Job_Satisfaction_T2
Job_Satisfaction_T4 ~ a3 * Job_Satisfaction_T3
Life_Satisfaction_T2 ~ a4 * Life_Satisfaction_T1
Life_Satisfaction_T3 ~ a5 * Life_Satisfaction_T2
Life_Satisfaction_T4 ~ a6 * Life_Satisfaction_T3
# Cross-lagged paths
Job_Satisfaction_T2 ~ b1 * Life_Satisfaction_T1
Job_Satisfaction_T3 ~ b2 * Life_Satisfaction_T2
Job_Satisfaction_T4 ~ b3 * Life_Satisfaction_T3
Life_Satisfaction_T2 ~ b4 * Job_Satisfaction_T1
Life_Satisfaction_T3 ~ b5 * Job_Satisfaction_T2
Life_Satisfaction_T4 ~ b6 * Job_Satisfaction_T3
'
# Summarizing the model
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
# Fitting the model
fit <- sem(model, data = data_wide)
# Summarizing the model
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
print(fit)
# Summarizing the model
summary(fit, fit.measures = TRUE, standardized = TRUE, rsquare = TRUE)
print(fit)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
t(`r(test_result$p.value`)
t(`r(test_result$p.value`)
t(`r(test_result$p.value`)
t(`r(test_result$p.value`)
t(`r(test_result$p.value`)
t(`r(test_result$p.value`)
print(test_result)
The associated p-value is {=r round(test_result$p.value, 3)}.
round(test_result$p.value, 3)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
# This will create a dataset with 1000 rows (2 rows for each of the 500 individuals).
# Creating the example dataset
set.seed(123) # for reproducibility
# Setting the number of individuals for our sample data
n <- 500
# Specifying the desired correlation matrix for our data
cor_matrix <- matrix(c(1, 0.30,
0.30, 1),
nrow=2)
# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)
# Generating correlated random data
random_data <- matrix(rnorm(n * 2), ncol=2)
correlated_data <- random_data %*% cholesky
# Converting the generated data into a structured data frame
data_large <- data.frame(
Individual = rep(1:n, each=2),
TimePoint = rep(c("T1", "T2"), times=n),
Job_Satisfaction = c(correlated_data[,1], correlated_data[,2])
)
head(data_large)
# Performing the paired t-test to compare Life Satisfaction scores at two time points
# Extracting Job_Satisfaction scores for the two time points
t1_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T1"]
t2_scores_large <- data_large$Job_Satisfaction[data_large$TimePoint == "T2"]
test_result <- t.test(t1_scores_large, t2_scores_large, mu = 0, paired = TRUE)
print(test_result)
