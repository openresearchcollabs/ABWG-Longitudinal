---
title: "State-Trait Models"
author: "Biostatistics Working Group"
---

## Overview
Latent state-trait models (LSTMs) offer a nuanced perspective into the world of psychological measurement, differentiating between consistent (trait) and situational (state) components of observed behaviors. Gaining traction in psychology, behavioral research, and social sciences, LSTMs provide insights into how much of an individual's behavior at a given time point can be attributed to enduring traits versus momentary states. These models can be thought of as an evolution of factor analysis, yet tailored specifically to disentangle stable and transient influences on behavior. Particularly adept for repeated measurements, LSTMs are vital when the goal is to understand the variability in observations â€“ whether it's consistent across occasions or varies due to situational factors. At the core of the LSTM framework is its dual focus: on one hand, it captures the consistent trait-like behavior, and on the other, it accounts for situation-specific deviations or states. This intricate balance between "latent" traits and states is the hallmark of LSTMs, making them an essential tool for comprehensive psychological assessments.

[+add diagrams/figures]

### When to use Latent State-Trait Models?
You should consider Latent State-Trait Models in the following situations:

1. You want to discern: The stable, enduring qualities (traits) from those that vary due to temporary conditions (states) in an individual's behavior or emotions.
2. Your variable: Reflects a combination of stable characteristics and situational influences, measured repeatedly over time or situations.
3. You are interested in: Disentangling the variance attributable to enduring individual differences from that due to situational or momentary influences.

### Getting Started with Latent State-Trait Models
In this tutorial, we will guide you through an example of a latent state-trait model using a small dataset. By the time you complete this tutorial, you will be equipped to:

1. Understand the basic principles of latent state-trait models.
2. Apply this modeling technique to tease apart state and trait components from your repeated measures data.
3. Analyze and interpret the outcomes to understand the relative contributions of stable traits and transient states to observed variability.

## Basic Example
In this tutorial, we will begin by generating a sample dataset directly within R to ensure everyone has the same starting point and can follow along without needing to download or access external files. This generated dataset will serve as our example throughout this tutorial. In your own analyses, you'll likely start by importing your own data.

The simulated dataset created for this example consists of scores on a single outcome variable ("Job_Satisfaction") for 500 individuals each measured at four time points: T1-T4.

#### Create Example Dataset
```{r}
set.seed(123)
n <- 500
timepoints <- 4

# Simulate the trait-like component
trait <- rnorm(n, mean = 100, sd = 10)

# Simulate the state-like component
state <- matrix(rnorm(n * timepoints, mean = 0, sd = 5), nrow = n, ncol = timepoints)

# Combine trait and state components
data <- data.frame(id = rep(1:n, each = timepoints),
                   time = rep(1:timepoints, times = n),
                   value = c(t(trait + state)))
```

### Model Specification and Estimation
To specify a Latent State-Trait Model, we will utilize the lavaan syntax to outline both the measurement model and the structural model. This model allows us to decompose observed variance into stable trait components and time-specific state components for each individual. By doing so, we can differentiate between consistent individual differences and situation-driven variations in the outcome variable.

#### Install and Load Necessary Libraries
```{r setup, echo=TRUE, warning=FALSE, message=FALSE}
# Install the lavaan package if not already installed
if (!("lavaan" %in% installed.packages())) {
  install.packages("lavaan")
}

library(lavaan)
```

#### Model
```{r}

# Define the model
model <- '
  # Trait component
  trait =~ 1 * value_t1 + 1 * value_t2 + 1 * value_t3 + 1 * value_t4

  # State component
  state =~ value_t1 + value_t2 + value_t3 + value_t4

  # Residual variances
  value_t1 ~~ value_t1
  value_t2 ~~ value_t2
  value_t3 ~~ value_t3
  value_t4 ~~ value_t4
'
```

#### Fit Model
```{r, eval=FALSE}
# Fit the State-Trait Model
fit <- sem(model, data = data_wide)
```

#### Model Summary
```{r}
summary(fit, fit.measures=TRUE, standardized=TRUE, rsquare=TRUE)
```

### Interpreting the Results
A State-Trait Model was fitted to decompose the observed variance in the repeated measurements into a stable, trait component and a fluctuating, state component. The trait component captures the stable, consistent characteristics of an individual over the different time points, while the state component captures the fluctuations or changes that are specific to each time point.

From the `summary` output:
- The estimated loadings for the trait component can provide insight into the relative consistency of the trait over time.
- The estimated loadings for the state component can highlight the relative magnitude of the fluctuating component at each time point.
- The residual variances provide information on the unexplained variance for each time point after accounting for the trait and state components.

## Conclusion
The State-Trait Model allows us to understand the proportion of variance in the observed data that can be attributed to stable, trait-like characteristics versus transient, state-like fluctuations. This provides a richer understanding of the dynamics of the measured construct over time, moving beyond a simple comparison of mean levels.





