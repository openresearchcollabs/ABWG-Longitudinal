---
title: "Linear Mixed Models: Random Intercept"
author: "Biostatistics Working Group"
---

# LMM: Random Intercept {.unnumbered}

## Overview

<p>

The LMM:ri is similar to traditional (fixed-effect) linear regression extending on this approach by including a subject-specific random-effect that allows each participant to have their own unique intercept value, in addition to the overall mean-level (fixed-effect) intercept value zzzzt

In this example, we will use the LMM:ri to analyze trajectories of height obtained across multiple measurement occasions in a sample of youth taking part in the ABCD Study. Our primary aim is to characterize stability and change in height assessments, while accounting for observations that are clustered within youth over time. To do so, we will use the LMM:ri to simultaneously model an overall sample mean trajectory (fixed effect) and subject-specific (random) effects that vary randomly about the sample mean trajectory.

</p>

## Preliminary Setup

::: panel-tabset
### Install Packages {.tabset .tabset-fade .tabset-pills}

::: blue
> **This code installs the r packages necessary for this example, if
> they are not already installed**

```{r pckg-install}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

# Create a list of required packages
packages_required <- c("tidyverse","rstatix","DT","lme4","report","broom","gridExtra")

# Check which packages are not installed and install them
packages_to_install <- setdiff(packages_required, rownames(installed.packages()))
if (length(packages_to_install) > 0) {
    install.packages(packages_to_install)
}

# Load the required packages
lapply(packages_required, library, character.only = TRUE)

```
:::

### Load Packages

::: blue
**This code loads the r libraries necessary for this example**

```{r lib-load}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

library(tidyverse)    # Collection of R packages for data science
library(rstatix)      # Pipe-friendly framework for basic statistical tests
library(DT)           # Rendering interactive data tables
library(lme4)         # Linear mixed-effects models
library(report)       # Easy reporting of regression analyses
library(broom)        # Tidy and augment statistical models output
library(gridExtra)    # Arrange multiple grid-based plots on a page

```
:::

### Config Options

::: blue
**This code configures knitr code chunk options**

```{r config}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE

knitr::opts_chunk$set(echo = T, message=F, warning=F, error=F, 
                      comment=NA, cache=T, code_folding=T,
                      R.options=list(width=220, digits = 3),
                      fig.align='center', 
                      out.width='75%', fig.asp=.75)
```
:::
:::

## Descriptives Overview

::: panel-tabset
### Read and View Data {.tabset .tabset-fade .tabset-pills}

::: blue
**This code reads in and shows the data to be used in the current
example**

```{r read-data}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| output: FALSE
#| cache: FALSE

# Set the data paths
data_path_1 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/demo5.0.rds"
data_path_2 <- "/Users/shawes/ABCD/data/rds/abcd_5.0_rds/core-rds-5.0/non-imaging_excluding_nt_5.0.rds"

# Read the data
data_demographics <- readRDS(data_path_1)
data_nonimaging <- readRDS(data_path_2)

# Subset the nonimaging data to include desired variables
selected_vars <- c("src_subject_id", "eventname", "nihtbx_totalcomp_fc", "anthroweightcalc", "anthroheightcalc")
subset_data <- data_nonimaging[, selected_vars]

library(dplyr)
# # Merge the datasets on 'src_subject_id' and 'eventname'
merged_data <- data_demographics %>%
  full_join(subset_data, by = c("src_subject_id", "eventname"))

# Inspect the merged data structure
str(merged_data)

# Define event names to be retained in the analysis and convert variables to appropriate data types
eventnames_to_include <- c("baseline_year_1_arm_1",
                           "1_year_follow_up_y_arm_1",
                           "2_year_follow_up_y_arm_1",
                           "3_year_follow_up_y_arm_1",
                           "4_year_follow_up_y_arm_1")

df <- merged_data %>%
  filter(eventname %in% eventnames_to_include) %>%
  mutate(
    src_subject_id = as.factor(src_subject_id),
    eventname = factor(eventname, levels = eventnames_to_include, ordered = TRUE),
    age = as.numeric(age),
    sex = as.factor(sex),
    race.4level = as.factor(race.4level),
    hisp = as.factor(hisp),
    high.educ.bl = as.factor(high.educ.bl),
    household.income.bl = as.factor(household.income.bl),
    acs_raked_propensity_score = as.numeric(acs_raked_propensity_score),
    rel_family_id.bl = as.factor(rel_family_id.bl),
    site_id_l = as.factor(site_id_l),
    nihtbx_totalcomp_fc = as.numeric(nihtbx_totalcomp_fc),
    anthroweightcalc = as.numeric(anthroweightcalc),
    anthroheightcalc = as.numeric(anthroheightcalc)
  ) %>%
  # Exclude cases from unused assessment waves
  filter(!is.na(eventname))

```
:::

### Descriptives

::: blue
**This code creates a descriptives table**

```{r descriptives}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE

# Define a function to compute descriptives
compute_descriptives <- function(data, event_name) {
  # For factor variables
  sex_desc <- paste0(table(data$sex), " (", round(100 * prop.table(table(data$sex)), 1), "%)")
  race_desc <- paste0(table(data$race.4level), " (", round(100 * prop.table(table(data$race.4level)), 1), "%)")
  
  # For numeric variables
  age_desc <- paste0(round(mean(data$age, na.rm = TRUE), 2), " (", round(sd(data$age, na.rm = TRUE), 2), ")")
  weight_desc <- paste0(round(mean(data$anthroweightcalc, na.rm = TRUE), 2), " (", round(sd(data$anthroweightcalc, na.rm = TRUE), 2), ")")
  height_desc <- paste0(round(mean(data$anthroheightcalc, na.rm = TRUE), 2), " (", round(sd(data$anthroheightcalc, na.rm = TRUE), 2), ")")
  
  # Combine into a data frame
  desc_df <- data.frame(
    Variable = c("Sex - Female", "Sex - Male or other", "Race - Asian", "Race - Black", "Race - Other/Mixed", "Race - White", "Age", "Weight", "Height"),
    Value = c(sex_desc, race_desc, age_desc, weight_desc, height_desc)
  )
  
  # Rename the Value column based on event name
  colnames(desc_df)[2] <- event_name
  return(desc_df)
}

# Compute descriptives for each event
baseline_desc <- compute_descriptives(subset(df, eventname == "baseline_year_1_arm_1"), "baseline_year_1_arm_1")
one_year_desc <- compute_descriptives(subset(df, eventname == "1_year_follow_up_y_arm_1"), "1_year_follow_up_y_arm_1")
two_year_desc <- compute_descriptives(subset(df, eventname == "2_year_follow_up_y_arm_1"), "2_year_follow_up_y_arm_1")
three_year_desc <- compute_descriptives(subset(df, eventname == "3_year_follow_up_y_arm_1"), "3_year_follow_up_y_arm_1")

# Join all data frames side-by-side
final_table <- baseline_desc %>%
  left_join(one_year_desc, by = "Variable") %>%
  left_join(two_year_desc, by = "Variable") %>%
  left_join(three_year_desc, by = "Variable")

# Adjust for the required format
final_table[1:6, 3:5] <- NA

# Round numeric values to two decimal places
numeric_cols <- sapply(final_table, is.numeric)
final_table[numeric_cols] <- lapply(final_table[numeric_cols], round, 2)

# Create heading rows with the same columns as final_table
heading_rows <- data.frame(
  Variable = c("Sex", "Race"),
  baseline_year_1_arm_1 = NA_real_,
  `1_year_follow_up_y_arm_1` = NA_real_,
  `2_year_follow_up_y_arm_1` = NA_real_,
  `3_year_follow_up_y_arm_1` = NA_real_
)

# Set column names of heading_rows to match final_table
colnames(heading_rows) <- colnames(final_table)

# Introduce group labels and adjust the "Variable" column
final_table <- rbind(
                    heading_rows[1,], 
                    final_table[1:2,],
                    heading_rows[2,], 
                    final_table[3:6,], 
                    final_table[7:9,]
                    )

# Update the Variable column to remove redundant factor variable name
final_table$Variable <- gsub("Sex - ", "", final_table$Variable)
final_table$Variable <- gsub("Race - ", "", final_table$Variable)
final_table$Variable[final_table$Variable == "Male or other"] <- "Male"

# Add non-breaking spaces for increased indentation
final_table$Variable[final_table$Variable %in% c("Female", "Male", "Asian", "Black", "Other/Mixed", "White")] <- 
  paste0(rep("&nbsp;", 6), final_table$Variable[final_table$Variable %in% c("Female", "Male", "Asian", "Black", "Other/Mixed", "White")])

# Update column headers
colnames(final_table)[2:5] <- c("Baseline", "Year 1", "Year 2", "Year 3")

# Display the table interactively without row names, with updated column headers, and with HTML entities rendered
datatable(final_table, 
          colnames = c("", "Baseline", "Year 1", "Year 2", "Year 3"),
          options = list(pageLength = nrow(final_table), autoWidth = TRUE),
          rownames = FALSE, escape = FALSE,
          caption = "Descriptives Table")  # Add table title

```

:::
:::

## Results 
<div class = "blue">

::: panel-tabset
### Build Model {.tabset .tabset-fade .tabset-pills}

::: blue

The code fits a linear mixed model to predict the 'Height' variable based on time points ('eventname') and handedness ('Handedness'), while accounting for individual-level variability by including random intercepts for each participant ('src_subject_id'). The results of the model are then printed to provide a summary of the fitted model parameters.

**STEP 1: Compute LMM Model with Random Intercepts**
```{r build-model-1}
#| class.source: 'fold-hide'
#| message: FALSE
#| warning: FALSE
#| echo: TRUE

## Linear Mixed Model with a random intercept (LMM-ri)
random_intercepts <- lmer(anthroheightcalc ~ 1 + eventname + sex + (1|src_subject_id), data = df, REML=T)

print(random_intercepts)
```

```{r model-output}
#| echo: TRUE
#| messages: FALSE
#| warning: FALSE
#| code-summary: testing

## Output and reports extending from the LMM-ri analyses
summary(random_intercepts)
confint(random_intercepts, level = 0.95, method = "Wald")
report_performance(random_intercepts)

```

The code provided executes a linear mixed model (LMM) to predict children's 
height across different time points (Baseline, Year_1, Year_2, Year_3, and Year_4), and also takes into account their handedness (Handedness). This model accounts for individual variability in height by including a random intercept for each subject (src_subject_id). The output indicates that the model was fit using the REML (Restricted Maximum Likelihood) criterion. The random intercept for the src_subject_id has a standard deviation of 2.147 units, and the residual standard deviation is 2.257 units. The fixed effects section provides the coefficients for the intercept, eventname, and two levels of the Handedness variable.

From the model summary: The intercept, corresponding to the reference levels of the 
predictors (presumably the baseline event and right-handedness), is estimated at 
**r fixed_effects(random_intercepts)[1]** units, and this effect is highly significant. The effect of the linear term for eventname is positive and statistically significant, suggesting an increase of approximately **r eventname_effect** units in height for each unit change in eventname. Regarding handedness, children who are left-handed show a non-significant increase in height of about **r left_handed_effect** units compared to right-handed children, while those with mixed-handedness show a significant increase of **r mixed_handed_effect** units.

The model's explanatory power is highlighted by a conditional R2 of **r conditional_R2**, meaning it explains **r conditional_R2*100**% of the total variance when considering both fixed and random effects. The marginal R2, which considers only the fixed effects, is **r marginal_R2**.

### Model Plots

The following set of plots are used to facilitate model diagnostics. The first is a histogram showcasing the distribution of random intercepts for individual subjects, indicating variations in height not explained by the fixed effects. The second depicts residuals versus fitted values, helping assess the model's fit and potential heteroscedasticity. The third contrasts observed and predicted height values across different time points, offering a side-by-side evaluation of the model's predictions against actual observations.

::: blue
```{r diagnosticplots}

# Extract the random effects
random_effects <- ranef(random_intercepts)[[1]]

# Convert to dataframe
random_effects_df <- data.frame(Intercept = random_effects$`(Intercept)`)

# Plot 1: Histogram
hist_plot <- ggplot(random_effects_df, aes(x = Intercept)) +
  geom_histogram(aes(y = ..density..), bins = 30, color = "black", fill = "lightblue") + labs(title = "Histogram of Random Effects", x = "Random Intercept Values", y = "Density") +
  theme_minimal()

# Plot 2: Residuals vs Fitted Values
resid_plot <- ggplot(NULL, aes(x = fitted_values, y = residuals)) +
  geom_point(alpha = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  labs(title = "Residuals vs Fitted Values", x = "Fitted Values", y = "Residuals") +
  theme_minimal()

```

```{r trajectoryplot}

# Extract the data frame used in the model
model_data <- random_intercepts@frame

# Extract unique subject IDs from the model's data
original_subject_ids <- unique(model_data$src_subject_id)

# Subset the original data to include only those subjects
df_subset <- df %>% filter(src_subject_id %in% original_subject_ids)

eventname_map <- c(
  "baseline_year_1_arm_1" = "Baseline",
  "1_year_follow_up_y_arm_1" = "Year_1",
  "2_year_follow_up_y_arm_1" = "Year_2",
  "3_year_follow_up_y_arm_1" = "Year_3",
  "4_year_follow_up_y_arm_1" = "Year_4"
)

# Apply the recoding to the eventname variable
df_subset$eventname <- factor(df_subset$eventname, levels = names(eventname_map), labels = eventname_map)

# Verify the recoding
table(df_subset$eventname)

# Generate the plot
ggplot(df_subset, aes(x = eventname, y = anthroheightcalc, group = src_subject_id)) +
  # Individual estimated height trajectories in faded lines
  geom_line(aes(group = src_subject_id), alpha = 0.3, color = "grey50") +
  # Overall group-mean trajectory in blue with increased thickness
  stat_summary(aes(group = 1), fun = mean, geom = "line", color = "blue", linewidth = 1) +
  labs(title = "Individual and Group-Mean Height Trajectories",
       x = "Event Name",
       y = "Height") +
  theme_minimal()

```

The provided code visualizes individual and group-mean height trajectories over different event names. Individual height trajectories for each subject are depicted as faded gray lines, allowing for a clear view of the variability among subjects. In contrast, the overall group-mean trajectory, which represents the average trend across all individuals for each event name, is highlighted in blue. The average height at r mean(df_descriptable$Height) has increased by **r mean(df_descriptable$Height_followup - df_descriptable$Height)** units from baseline. The attached chart effectively communicates these trajectories, emphasizing the average trend of the group while also showcasing individual differences.

## Wrapping Up
<div class = "blue">

::: panel-tabset
### Write-up {.tabset .tabset-fade .tabset-pills}

::: blue

The linear mixed model analysis was conducted to predict children's height across different time points (Baseline, Year_1, Year_2, Year_3, and Year_4) using the event name (eventname) and handedness (Handedness). The eventname predictor was statistically significant with a p-value of r format.pval(fixed_effects$Pr(>|t|)[2], digits = 3). For the handedness variable, children with mixed-handedness showed a significant increase in height of about r round(fixed_effects$Estimate[4], 4) units compared to right-handed children with a p-value of r format.pval(fixed_effects$Pr(>|t|)[4], digits = 3). On the other hand, left-handed children's height increase, although positive at r round(fixed_effects$Estimate[3], 4) units, was not statistically significant with a p-value of r format.pval(fixed_effects$Pr(>|t|)[3], digits = 3). The model's overall ability to explain the variance in height was substantial, with a conditional R^2 of r report_performance(random_intercepts)$Conditional R2[1], indicating that it accounted for this proportion of the variability in height when considering both fixed and random effects. The marginal R^2 was r report_performance(random_intercepts)$Marginal R2[1], meaning that the fixed effects alone explained this proportion of the variability.

:::
:::



