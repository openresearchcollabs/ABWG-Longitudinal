---
title: "Random-Intercept Crosslagged Panel Models"
author: "Biostatistics Working Group"
---

####
see:
@article{mulder2021three,
  title={Three extensions of the random intercept cross-lagged panel model},
  author={Mulder, Jeroen D and Hamaker, Ellen L},
  journal={Structural Equation Modeling: A Multidisciplinary Journal},
  volume={28},
  number={4},
  pages={638--648},
  year={2021},
  publisher={Taylor \& Francis}
}

####
## Overview
Random-Intercept Crosslagged Panel Model (RI-CLPMs) is a statistical method used capture dynamic associations between variables across time points, while accounting for individual differences. This approach builds upon traditional crosslagged panel models by introducing a random intercept, which captures the stable, trait-like differences between individuals. RI-CLPMs emphasize the distinction between within-person variability and between-person differences. This approach allows researchers to simultaneously explore how variables influence each other over time (crosslagged effects) and how these relationships might vary across individuals due to their unique traits. The blend of capturing dynamic relations and individual heterogeneity provides insight on whether observed changes are due to intrinsic individual differences or because of the influence of one variable on another.

[+add diagrams/figures]

### When to use Random-Intercept Crosslagged Panel Models?
You should consider Random-Intercept Crosslagged Panel Models in the following situations:

1. You want to understand: The reciprocal relationships between variables over time, considering individual-specific effects.
2. Your data: Is longitudinal, with repeated measures of at least two variables across 4+ time points.
3. You aim to: Capture the stable individual differences and understand how one variable can predict changes in another across time.

### Getting Started with Random-Intercept Crosslagged Panel Models
In this tutorial, we will guide you through an example of a random-intercept crosslagged panel model using a small dataset. By the time you complete this tutorial, you will be equipped to:

1. Understand the basic concepts of random-intercept crosslagged panel models.
2. Construct these models to assess the dynamic interplay between variables over time, accounting for individual differences.
3. Analyze and interpret the model's results to make informed conclusions about temporal relationships between the studied variables.

## Basic Example
In this tutorial, we will begin by generating a sample dataset directly within R to ensure everyone has the same starting point and can follow along without needing to download or access external files. This generated dataset will serve as our example throughout this tutorial. In your own analyses, you'll likely start by importing your own data.

The simulated dataset created for this example consists of scores on two outcome variables ("Job_Satisfaction", "Life_Satisfaction") for 500 individuals each measured at five time points: T1-T5. 

#### Create Example Dataset
```{r}

# Setting the seed for reproducibility
set.seed(123)

# Setting the number of individuals for our sample data
n <- 500

# Specifying the desired correlation matrix for our data (5x5 matrix for 5 timepoints)
cor_matrix <- matrix(c(1, 0.3, 0.3, 0.3, 0.3,
                      0.3, 1, 0.3, 0.3, 0.3,
                      0.3, 0.3, 1, 0.3, 0.3,
                      0.3, 0.3, 0.3, 1, 0.3,
                      0.3, 0.3, 0.3, 0.3, 1), 
                      nrow=5)

# Using Cholesky decomposition to generate correlated data
cholesky <- chol(cor_matrix)

# Generating correlated random data for 5 timepoints
random_data <- matrix(rnorm(n * 5), ncol=5)
correlated_data <- random_data %*% cholesky

# Converting the generated data into a structured data frame in wide format
data <- data.frame(
  Individual = 1:n,
  Job_Satisfaction_T1 = round(runif(n, 5, 10)),
  Job_Satisfaction_T2 = round(runif(n, 5, 10)),
  Job_Satisfaction_T3 = round(runif(n, 5, 10)),
  Job_Satisfaction_T4 = round(runif(n, 5, 10)),
  Job_Satisfaction_T5 = round(runif(n, 5, 10)),
  Life_Satisfaction_T1 = round(correlated_data[,1] * 2 + 7),
  Life_Satisfaction_T2 = round(correlated_data[,2] * 2 + 7),
  Life_Satisfaction_T3 = round(correlated_data[,3] * 2 + 7),
  Life_Satisfaction_T4 = round(correlated_data[,4] * 2 + 7),
  Life_Satisfaction_T5 = round(correlated_data[,5] * 2 + 7)
)

```

### Model Specification and Estimation
Now that we have our simulated data, we can fit a Random-Intercept Cross-Lagged Panel Model using the lavaan package.

### Model Specification and Estimation
To specify a Random-Intercept Cross-Lagged Panel Model (RI-CLPM), we will employ the lavaan syntax. This model allows us to explore the interplay between two variables across multiple time points. While modeling the cross-lagged associations between the variables, the RI-CLPM also accounts for stable individual differences through the inclusion of random intercepts.

#### Install and Load Necessary Libraries
```{r setup, echo=TRUE, warning=FALSE, message=FALSE}
# Install the lavaan package if not already installed
if (!("lavaan" %in% installed.packages())) {
  install.packages("lavaan")
}

library(lavaan)
```

#### Fit Model
```{r}

model <- '
  # Create between components (random intercepts)
  RIx =~ 1*Job_Satisfaction_T1 + 1*Job_Satisfaction_T2 + 1*Job_Satisfaction_T3 + 1*Job_Satisfaction_T4+ 1*Job_Satisfaction_T5
  RIy =~ 1*Life_Satisfaction_T1 + 1*Life_Satisfaction_T2 + 1*Life_Satisfaction_T3 + 1*Life_Satisfaction_T4 + 1*Life_Satisfaction_T5
  
  # Create within-person centered variables
  wx1 =~ 1*Job_Satisfaction_T1
  wx2 =~ 1*Job_Satisfaction_T2
  wx3 =~ 1*Job_Satisfaction_T3 
  wx4 =~ 1*Job_Satisfaction_T4
  wx5 =~ 1*Job_Satisfaction_T5
  wy1 =~ 1*Life_Satisfaction_T1
  wy2 =~ 1*Life_Satisfaction_T2
  wy3 =~ 1*Life_Satisfaction_T3
  wy4 =~ 1*Life_Satisfaction_T4
  wy5 =~ 1*Life_Satisfaction_T5

  # Estimate lagged effects between within-person centered variables
  wx2 + wy2 ~ wx1 + wy1
  wx3 + wy3 ~ wx2 + wy2
  wx4 + wy4 ~ wx3 + wy3
  wx5 + wy5 ~ wx4 + wy4

  # Estimate covariance between within-person centered variables at first wave
  wx1 ~~ wy1 # Covariance
  
  # Estimate covariances between residuals of within-person centered variables 
  # (i.e., innovations)
  wx2 ~~ wy2
  wx3 ~~ wy3
  wx4 ~~ wy4
  wx5 ~~ wy5
  
  # Estimate variance and covariance of random intercepts
  RIx ~~ RIx
  RIy ~~ RIy
  RIx ~~ RIy

  # Estimate (residual) variance of within-person centered variables
  wx1 ~~ wx1 # Variances
  wy1 ~~ wy1 
  wx2 ~~ wx2 # Residual variances
  wy2 ~~ wy2 
  wx3 ~~ wx3 
  wy3 ~~ wy3 
  wx4 ~~ wx4 
  wy4 ~~ wy4 
  wx5 ~~ wx5
  wy5 ~~ wy5
'

```

#### Fit Model
```{r}
# Fit the Random-Intercept Crosslagged Panel Model
fit <- lavaan(model,
  data = data, 
  missing = "ML", 
  meanstructure = T, 
  int.ov.free = T
)
```

#### Model Summary
```{r}
summary(fit, standardized = T)
```

```{r}
## Creating variable (names) from output to be used for inline text

library(broom)
tidyfit <- tidy(fit)

#
#
#wx1 ~~ wy1

# Extract p-values for specific terms into tibbles
intercept_variance_estimate_V1 <- round(tidyfit[tidyfit$term == "RIx =~ Job_Satisfaction_T1", "estimate"], 3)
slope_variance_estimate_V1 <- round(tidyfit[tidyfit$term == "wx2 ~ wx1", "estimate"], 3)

# Extract values from the tibble for inline text
test1 <- intercept_variance_estimate_V1$estimate
test2 <- slope_variance_estimate_V1$estimate

```

### Interpreting the Results
`r test1`
`r test2`

An RI-CLPM was fitted to xxxxxxxx

From the `summary` output:
- The estimated xxxxx xxxxxxx.
- The estimated xxxxxxx.
- The xxxxxx.

## Conclusion
The RI-CLPM Model allows us to understand xxxxxxx.


